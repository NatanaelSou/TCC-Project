// =====================================================================================
// SERVIDOR PRINCIPAL DA API DE SERVI√áO DE CONTE√öDO
// =====================================================================================
// Este arquivo √© o ponto de entrada principal da aplica√ß√£o backend.
// Respons√°vel por:
// - Inicializar o servidor Express
// - Configurar middlewares de seguran√ßa e valida√ß√£o
// - Registrar todas as rotas da API
// - Gerenciar tratamento de erros
// - Conectar ao banco de dados PostgreSQL
// - Iniciar o servidor na porta especificada

// =====================================================================================
// CARREGAR VARI√ÅVEIS DE AMBIENTE
// =====================================================================================
// Carregar vari√°veis de ambiente do arquivo .env com m√∫ltiplas localiza√ß√µes poss√≠veis
const path = require('path');
const fs = require('fs');

// Tentar carregar .env de m√∫ltiplas localiza√ß√µes poss√≠veis
const possibleEnvPaths = [
  path.join(__dirname, '../.env'), // TCC-Project/.env
  path.join(__dirname, '../../.env'), // OneDrive/Documentos/.env
  path.join(process.cwd(), '.env'), // Diret√≥rio atual
  '.env' // Raiz do projeto
];

let envLoaded = false;
for (const envPath of possibleEnvPaths) {
  try {
    const result = require('dotenv').config({ path: envPath });
    if (!result.error) {
      console.log(`‚úÖ Arquivo .env carregado de: ${envPath}`);
      envLoaded = true;
      break;
    }
  } catch (error) {
    // Continuar tentando pr√≥ximos caminhos
  }
}

if (!envLoaded) {
  console.error('‚ùå AVISO: N√£o foi poss√≠vel encontrar o arquivo .env');
  console.error('üí° O servidor continuar√° com valores padr√£o, mas verifique a configura√ß√£o do banco');
}

// Importar depend√™ncias principais
const express = require('express'); // Framework web para Node.js
const cors = require('cors'); // Middleware para permitir requisi√ß√µes cross-origin
const helmet = require('helmet'); // Middleware de seguran√ßa para headers HTTP
const rateLimit = require('express-rate-limit'); // Middleware para limitar taxa de requisi√ß√µes
const { connectDB } = require('./config/database'); // Fun√ß√£o para conectar ao banco de dados

// =====================================================================================
// IMPORTA√á√ÉO DAS ROTAS DA API
// =====================================================================================
// Cada arquivo de rotas cont√©m os endpoints espec√≠ficos para uma entidade do sistema
const userRoutes = require('./routes/users'); // Rotas para gerenciamento de usu√°rios
const creatorRoutes = require('./routes/creators'); // Rotas para gerenciamento de criadores
const contentRoutes = require('./routes/content'); // Rotas para gerenciamento de conte√∫do
const subscriptionRoutes = require('./routes/subscriptions'); // Rotas para inscri√ß√µes
const paymentRoutes = require('./routes/payments'); // Rotas para pagamentos

// =====================================================================================
// INICIALIZA√á√ÉO DA APLICA√á√ÉO EXPRESS
// =====================================================================================
const app = express(); // Criar inst√¢ncia da aplica√ß√£o Express
const PORT = process.env.PORT || 3001; // Porta do servidor (padr√£o 3001 se n√£o especificada)

// =====================================================================================
// CONFIGURA√á√ÉO DE MIDDLEWARES DA APLICA√á√ÉO
// =====================================================================================

// Middleware de seguran√ßa - Define headers HTTP seguros para prevenir ataques comuns
app.use(helmet());

// Configura√ß√£o CORS - Permite requisi√ß√µes do frontend
// - origin: Define quais dom√≠nios podem fazer requisi√ß√µes (padr√£o: localhost:3000)
// - credentials: Permite envio de cookies e headers de autentica√ß√£o
app.use(cors({
  origin: process.env.FRONTEND_URL || 'http://localhost:3000',
  credentials: true
}));

// Rate limiting - Protege contra ataques de for√ßa bruta e abuso da API
// - windowMs: Janela de tempo de 15 minutos
// - max: M√°ximo de 100 requisi√ß√µes por IP nesta janela
// - message: Mensagem de erro quando limite √© excedido
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutos
  max: 100, // limite de 100 requisi√ß√µes por janela
  message: 'Muitas requisi√ß√µes deste IP, tente novamente mais tarde.'
});
app.use('/api/', limiter); // Aplica apenas √†s rotas da API

// Middleware para parsing de dados JSON e URL-encoded
// - express.json(): Converte corpo das requisi√ß√µes JSON em objetos JavaScript
// - express.urlencoded(): Converte dados de formul√°rios em objetos JavaScript
// - limit: Define tamanho m√°ximo do corpo da requisi√ß√£o (10MB)
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Middleware de logging personalizado
// Registra todas as requisi√ß√µes no console com timestamp, m√©todo HTTP e caminho
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// =====================================================================================
// REGISTRO DAS ROTAS DA API
// =====================================================================================
// Cada rota √© montada em um caminho espec√≠fico e delega o tratamento para seu respectivo m√≥dulo
app.use('/api/users', userRoutes); // Endpoints: /register, /login, /profile, /:id
app.use('/api/creators', creatorRoutes); // Endpoints para gerenciamento de criadores
app.use('/api/content', contentRoutes); // Endpoints para gerenciamento de conte√∫do
app.use('/api/subscriptions', subscriptionRoutes); // Endpoints para inscri√ß√µes
app.use('/api/payments', paymentRoutes); // Endpoints para pagamentos

// =====================================================================================
// ROTAS UTILIT√ÅRIAS
// =====================================================================================

// Rota de sa√∫de da API - Endpoint para verificar se o servi√ßo est√° funcionando
// Retorna informa√ß√µes b√°sicas sobre o status do servi√ßo
app.get('/api/health', (req, res) => {
  res.json({
    status: 'OK', // Status do servi√ßo
    timestamp: new Date().toISOString(), // Timestamp atual
    service: 'Content Service API', // Nome do servi√ßo
    version: '1.0.0' // Vers√£o da API
  });
});

// Rota raiz - P√°gina inicial da API
// Fornece informa√ß√µes b√°sicas sobre o servi√ßo e link para documenta√ß√£o
app.get('/', (req, res) => {
  res.json({
    message: 'Bem-vindo √† API de Servi√ßo de Conte√∫do',
    version: '1.0.0',
    documentation: '/api/health' // Link para endpoint de sa√∫de
  });
});

// =====================================================================================
// MIDDLEWARE DE TRATAMENTO DE ERROS
// =====================================================================================

// Middleware global de tratamento de erros - Captura todos os erros n√£o tratados
// - Registra o erro no console para debugging
// - Retorna resposta padronizada ao cliente
// - Em desenvolvimento mostra mensagem detalhada, em produ√ß√£o mensagem gen√©rica
app.use((err, req, res, next) => {
  console.error('Erro na aplica√ß√£o:', err);
  res.status(500).json({
    error: 'Erro interno do servidor',
    message: process.env.NODE_ENV === 'development' ? err.message : 'Algo deu errado'
  });
});

// Middleware para tratamento de rotas n√£o encontradas (404)
// - Captura qualquer requisi√ß√£o para rotas que n√£o existem
// - Retorna erro 404 com mensagem descritiva
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Rota n√£o encontrada',
    message: `A rota ${req.originalUrl} n√£o existe nesta API`
  });
});

// =====================================================================================
// INICIALIZA√á√ÉO E GERENCIAMENTO DO SERVIDOR
// =====================================================================================

// Fun√ß√£o ass√≠ncrona para inicializar o servidor
// Respons√°vel por:
// 1. Estabelecer conex√£o com o banco de dados
// 2. Iniciar o servidor HTTP na porta especificada
// 3. Tratar erros durante a inicializa√ß√£o
async function startServer() {
  try {
    // Etapa 1: Conectar ao banco de dados PostgreSQL
    await connectDB();
    console.log('‚úÖ Conectado ao banco de dados PostgreSQL');

    // Etapa 2: Iniciar servidor HTTP
    app.listen(PORT, () => {
      console.log(`üöÄ Servidor rodando na porta ${PORT}`);
      console.log(`üìö Documenta√ß√£o da API: http://localhost:${PORT}/api/health`);
    });
  } catch (error) {
    // Em caso de erro, registrar e encerrar aplica√ß√£o
    console.error('‚ùå Erro ao iniciar o servidor:', error);
    process.exit(1); // C√≥digo de sa√≠da 1 indica erro
  }
}

// =====================================================================================
// TRATAMENTO DE SINAIS DO SISTEMA
// =====================================================================================

// Tratamento do sinal SIGINT (Ctrl+C) - Encerramento gracioso
process.on('SIGINT', () => {
  console.log('üõë Recebido sinal de interrup√ß√£o, encerrando servidor...');
  process.exit(0); // C√≥digo de sa√≠da 0 indica encerramento normal
});

// Tratamento do sinal SIGTERM - Encerramento gracioso em ambientes de produ√ß√£o
process.on('SIGTERM', () => {
  console.log('üõë Recebido sinal de t√©rmino, encerrando servidor...');
  process.exit(0); // C√≥digo de sa√≠da 0 indica encerramento normal
});

// =====================================================================================
// IN√çCIO DA APLICA√á√ÉO
// =====================================================================================

// Chamar fun√ß√£o de inicializa√ß√£o do servidor
startServer();

// Exportar a aplica√ß√£o Express para uso em testes ou outros m√≥dulos
module.exports = app;
