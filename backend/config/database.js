// =====================================================================================
// CONFIGURA√á√ÉO DE CONEX√ÉO COM BANCO DE DADOS MYSQL
// =====================================================================================
// Este arquivo gerencia a conex√£o e pool de conex√µes com o banco de dados MySQL.
// Respons√°vel por:
// - Configurar pool de conex√µes para otimiza√ß√£o de performance
// - Gerenciar eventos de conex√£o e desconex√£o
// - Fornecer fun√ß√µes utilit√°rias para execu√ß√£o de queries
// - Implementar middleware para transa√ß√µes de banco de dados

const mysql = require('mysql2/promise'); // Importar mysql2 para suporte a promises

// =====================================================================================
// CONFIGURA√á√ÉO DO POOL DE CONEX√ïES
// =====================================================================================
// Pool de conex√µes otimiza o uso de recursos do banco de dados
// Mant√©m conex√µes abertas para reutiliza√ß√£o, evitando overhead de cria√ß√£o/destrui√ß√£o
const pool = mysql.createPool({
  host: process.env.DB_HOST || 'localhost', // Host do servidor MySQL
  port: parseInt(process.env.DB_PORT, 10) || 3306, // Porta do servidor MySQL (padr√£o 3306)
  database: process.env.DB_NAME || 'content_service', // Nome do banco de dados
  user: process.env.DB_USER || 'root', // Usu√°rio do banco de dados
  password: String(process.env.DB_PASSWORD || ''), // Senha do usu√°rio convertida para string
  waitForConnections: true,
  connectionLimit: 20, // M√°ximo de conex√µes simult√¢neas no pool
  queueLimit: 0,
  acquireTimeout: 60000, // Timeout para adquirir conex√£o (60 segundos)
  timeout: 60000, // Timeout geral (60 segundos)
});

// =====================================================================================
// MONITORAMENTO DO POOL DE CONEX√ïES
// =====================================================================================

// Event listener para novas conex√µes estabelecidas
// √ötil para monitoramento e debugging de conex√µes ativas
pool.on('connect', (client) => {
  console.log('üîó Novo cliente conectado ao banco de dados');
});

// Event listener para erros inesperados nos clientes do pool
// Importante para identificar problemas de conectividade ou configura√ß√£o
pool.on('error', (err, client) => {
  console.error('‚ùå Erro inesperado no cliente do banco:', err);
});

// =====================================================================================
// FUN√á√ïES UTILIT√ÅRIAS PARA GERENCIAMENTO DE CONEX√ÉO
// =====================================================================================

// Fun√ß√£o ass√≠ncrona para estabelecer e testar conex√£o com o banco de dados
// Executa verifica√ß√µes b√°sicas para garantir que o banco est√° acess√≠vel
async function connectDB() {
  try {
    // Obter conex√£o do pool para teste de conex√£o
    const connection = await pool.getConnection();
    console.log('‚úÖ Conex√£o com MySQL estabelecida com sucesso');

    // Executar query simples para verificar funcionalidade do banco
    const [rows] = await connection.execute('SELECT NOW() as current_time');
    console.log('üïí Hora do servidor MySQL:', rows[0].current_time);

    // Liberar conex√£o de volta ao pool
    connection.release();
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao conectar ao banco de dados:', error.message);
    throw error; // Re-throw para tratamento no n√≠vel superior
  }
}

// =====================================================================================
// FUN√á√ïES UTILIT√ÅRIAS PARA EXECU√á√ÉO DE QUERIES
// =====================================================================================

// Fun√ß√£o para executar queries SQL de forma segura e com logging de performance
// - Mede o tempo de execu√ß√£o da query para monitoramento de performance
// - Registra queries executadas para debugging e auditoria
// - Trata erros de forma consistente
async function query(text, params) {
  const start = Date.now(); // Capturar tempo inicial para medi√ß√£o de performance
  try {
    const res = await pool.query(text, params); // Executar query usando pool
    const duration = Date.now() - start; // Calcular dura√ß√£o da execu√ß√£o
    console.log('üìä Query executada em', duration, 'ms:', text);
    return res; // Retornar resultado da query
  } catch (error) {
    console.error('‚ùå Erro na query:', error);
    throw error; // Re-throw para tratamento no n√≠vel superior
  }
}

// Fun√ß√£o para obter conex√£o personalizada do pool com funcionalidades extras
// - Adiciona logging autom√°tico para todas as queries da conex√£o
// - Sobrescreve m√©todo release para logging de desconex√£o
// - Retorna conex√£o pronta para uso em opera√ß√µes complexas
async function getClient() {
  const connection = await pool.getConnection(); // Obter conex√£o do pool
  const execute = connection.execute; // Salvar refer√™ncia original do m√©todo execute
  const release = connection.release; // Salvar refer√™ncia original do m√©todo release

  // Monkey patch: sobrescrever m√©todo execute para adicionar logging
  connection.execute = (...args) => {
    const start = Date.now();
    return execute.apply(connection, args).then(res => {
      const duration = Date.now() - start;
      console.log('üìä Query da conex√£o executada em', duration, 'ms:', args[0]);
      return res;
    });
  };

  // Monkey patch: sobrescrever m√©todo release para adicionar logging
  connection.release = () => {
    console.log('üîå Conex√£o liberada de volta ao pool');
    return release.apply(connection); // Chamar m√©todo original
  };

  return connection; // Retornar conex√£o personalizada
}

// Fun√ß√£o para fechar o pool de conex√µes de forma graciosa
// - Encerra todas as conex√µes ativas no pool
// - Deve ser chamada durante o shutdown da aplica√ß√£o
async function closePool() {
  console.log('üîí Fechando pool de conex√µes...');
  await pool.end(); // Fechar pool e todas as conex√µes
  console.log('‚úÖ Pool de conex√µes fechado');
}

// =====================================================================================
// MIDDLEWARE PARA TRANSA√á√ïES DE BANCO DE DADOS
// =====================================================================================

// Fun√ß√£o utilit√°ria para executar opera√ß√µes dentro de uma transa√ß√£o
// - Garante atomicidade das opera√ß√µes (tudo ou nada)
// - Faz rollback autom√°tico em caso de erro
// - Libera conex√£o automaticamente ap√≥s uso
async function withTransaction(callback) {
  const connection = await getClient(); // Obter conex√£o personalizada
  try {
    await connection.execute('START TRANSACTION'); // Iniciar transa√ß√£o MySQL
    const result = await callback(connection); // Executar opera√ß√µes da callback
    await connection.execute('COMMIT'); // Confirmar transa√ß√£o se tudo OK
    return result; // Retornar resultado das opera√ß√µes
  } catch (error) {
    await connection.execute('ROLLBACK'); // Desfazer transa√ß√£o em caso de erro
    throw error; // Re-throw erro para tratamento superior
  } finally {
    connection.release(); // Sempre liberar conex√£o de volta ao pool
  }
}

module.exports = {
  pool,
  connectDB,
  query,
  getClient,
  closePool,
  withTransaction
};
